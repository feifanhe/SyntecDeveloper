using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.Collections;
using Syntec_Developer.Controls.PropertyClasses;

namespace Syntec_Developer.Controls
{
	public partial class FenubarPanel : UserControl
	{
		private bool m_bIsNewFile;
		private bool m_bHasLoaded;
		private string m_sFileName;
		private Hashtable m_htbFenus;
		private List<Fenu> m_lstOpenedFenu;
		private FenubarProperties m_fpProperties;
		private ResmapTable m_rtResmapTable;

		internal XmlDocument m_xdDocument;
		internal XmlNode m_xnRoot;

		public delegate void XmlLoadCompletedHandler( object sender, RunWorkerCompletedEventArgs e );
		public event XmlLoadCompletedHandler XmlLoadCompleted;
		public delegate void FenuCloseHandler( object sender, EventArgs e );
		public event FenuCloseHandler FenuClose;
		public delegate void FenuButtonClickHandler( object sender, EventArgs e );
		public event FenuButtonClickHandler FenuButtonClick;


		#region Properties

		public string FullName
		{
			get
			{
				return this.m_sFileName;
			}
			set
			{
				this.m_sFileName = value;
			}
		}

		public string FileName
		{
			get
			{
				if( this.m_sFileName.LastIndexOf( '\\' ) >= 0 ) {
					return this.m_sFileName.Substring( this.m_sFileName.LastIndexOf( '\\' ) + 1 );
				}
				else {
					return this.m_sFileName;
				}
			}
		}

		public FenubarProperties Properties
		{
			get
			{
				return this.m_fpProperties;
			}
		}

		public Hashtable Fenus
		{
			get
			{
				return this.m_htbFenus;
			}
		}

		public List<Fenu> OpenedFenus
		{
			get
			{
				return this.m_lstOpenedFenu;
			}
		}

		#endregion

		public FenubarPanel( string sFileName, bool bIsNewFile, ResmapTable rtResmapTable )
		{
			InitializeComponent();
			this.m_sFileName = sFileName;
			this.m_bIsNewFile = bIsNewFile;
			this.m_rtResmapTable = rtResmapTable;
			InitializeMembers();

		}

		private void InitializeMembers()
		{
			this.m_bHasLoaded = false;
			this.m_htbFenus = new Hashtable();
			this.m_lstOpenedFenu = new List<Fenu>();
			this.m_fpProperties = new FenubarProperties();
		}

		private void FenubarPanel_Load( object sender, EventArgs e )
		{
			if( !this.m_bIsNewFile && !this.m_bHasLoaded ) {
				this.m_xdDocument = new XmlDocument();
				this.m_xdDocument.Load( m_sFileName );
				this.bgwLoadXml.RunWorkerAsync();
			}
		}

		private void bgwLoadXml_DoWork( object sender, DoWorkEventArgs e )
		{
			this.LoadXml();
			this.m_bHasLoaded = true;
		}

		private void bgwLoadXml_RunWorkerCompleted( object sender, RunWorkerCompletedEventArgs e )
		{
			this.XmlLoadCompleted.Invoke( this, e );
		}

		private void LoadXml()
		{
			XmlNode xnRoot = this.m_xdDocument.SelectSingleNode( "root" );
			this.m_xnRoot = xnRoot;
			foreach( XmlElement xnItem in xnRoot.ChildNodes ) {
				switch( xnItem.Name ) {
					case "fenu":
						LoadFenu( xnItem );
						break;
					default:
						break;
				}
			}
		}

		private void LoadFenu( XmlNode xnFenuNode )
		{
			Fenu fnFenuToAdd = new Fenu( m_xdDocument, xnFenuNode, m_rtResmapTable );
			if( this.m_htbFenus.ContainsKey( fnFenuToAdd.Properties.Name ) ) {
				MessageBox.Show( "Error: The same fenu name has been used!" );
			}
			else {
				this.m_htbFenus.Add( fnFenuToAdd.Properties.Name, fnFenuToAdd );
				fnFenuToAdd.FenuClose += new Fenu.FenuCloseHandler(Fenu_Close);
				fnFenuToAdd.FenuButtonClick += new Fenu.FenuButtonClickHandler(FenuButton_Click);
			}
		}


		public void ShowFenu( string sFenuName )
		{
			Fenu fnFenuToShow = this.m_htbFenus[ sFenuName ] as Fenu;
			if( fnFenuToShow != null && !this.m_lstOpenedFenu.Contains(fnFenuToShow) ) {
				this.Controls.Add( fnFenuToShow );
				this.m_lstOpenedFenu.Add( fnFenuToShow );
				fnFenuToShow.BringToFront();
				fnFenuToShow.Dock = DockStyle.Top;
			}
		}

		public void HideFenu( string sFenuName )
		{
			Fenu fnFenuToHide = this.m_htbFenus[ sFenuName ] as Fenu;
			this.Controls.Remove( fnFenuToHide );
			this.m_lstOpenedFenu.Remove( fnFenuToHide );
		}

		private void Fenu_Close( object sender, EventArgs e )
		{
			FenuClose.Invoke( sender, e );
			Fenu fnFenuToClose = sender as Fenu;
			this.Controls.Remove( fnFenuToClose );
			this.m_lstOpenedFenu.Remove( fnFenuToClose );
		}

		private void FenuButton_Click( object sender, EventArgs e )
		{
			this.FenuButtonClick.Invoke( sender, e );
		}
	}
}
