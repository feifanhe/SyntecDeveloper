using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using WeifenLuo.WinFormsUI.Docking;

namespace Syntec_Developer.Forms
{
	public partial class FormMain : Form
	{
		const bool IS_NEW_FILE = true;
		const bool IS_NOT_NEW_FILE = false;

		string m_sWorkDirectory;

		DCTreeView m_dcTreeView;
		DCToolBox m_dcToolBox;
		DCProperties m_dcProperties;
		DCFenuList m_dcFenuList;
		List<DCDocument> m_lstOpenedDocuments;

		#region Constructor & Initialize

		public FormMain()
		{
			InitializeComponent();
			m_sWorkDirectory = @"C:\OpenCNC Shared\OCRes";
			this.m_lstOpenedDocuments = new List<DCDocument>();
			InitializeTreeViewWindow();
			InitializePropertiesWindow();
			InitializeToolBoxWindow();
			InitializeFenuListWindow();
		}

		private void InitializeTreeViewWindow()
		{
			this.m_dcTreeView = new DCTreeView();
			this.m_dcTreeView.FormClosing += new FormClosingEventHandler( m_dcTreeView_FormClosing );
			this.m_dcTreeView.TreeViewDoubleClick +=
				new DCTreeView.TreeViewDoubleClickHandler( WorkDirectoryTreeView_DoubleClick );
			this.m_dcTreeView.LoadDirectory( m_sWorkDirectory );
			this.m_dcTreeView.Show( this.dplMainPanel, DockState.DockLeft );

			this.tsmiTreeView.Checked = true;
		}

		private void InitializePropertiesWindow()
		{
			this.m_dcProperties = new DCProperties();
			this.m_dcProperties.FormClosing += new FormClosingEventHandler( m_dcProperties_FormClosing );
			this.m_dcProperties.Show( this.dplMainPanel, DockState.DockRight );

			this.tsmiProperties.Checked = true;
		}

		private void InitializeToolBoxWindow()
		{
			this.m_dcToolBox = new DCToolBox();
			this.m_dcToolBox.FormClosing += new FormClosingEventHandler( m_dcToolBox_FormClosing );
			this.m_dcToolBox.Show( this.m_dcProperties.Pane, DockAlignment.Top, 0.5 );

			this.tsmiToolBox.Checked = true;
		}

		private void InitializeFenuListWindow()
		{
			this.m_dcFenuList = new DCFenuList();
			this.m_dcFenuList.FormClosing += new FormClosingEventHandler( m_dcFenuList_FormClosing );
			this.m_dcFenuList.Show( this.m_dcProperties.Pane, DockAlignment.Top, 0.5 );
			this.m_dcFenuList.Hide();
		}

		#endregion

		#region File Control Event

		private void NewBrowser_Click( object sender, EventArgs e )
		{
			OpenDocument( DocumentType.browser, GenerateNewNameWithIndex( "NewBrowser" ), IS_NEW_FILE );
		}

		private void NewFenubar_Click( object sender, EventArgs e )
		{
			OpenDocument( DocumentType.fenubar, GenerateNewNameWithIndex( "NewFenubar" ), IS_NEW_FILE );
		}

		private void OpenFile_Click( object sender, EventArgs e )
		{
			if( this.ofdlgOpenFile.ShowDialog() == DialogResult.OK ) {
				OpenFiles( ofdlgOpenFile.FileNames );
			}
		}

		private void OpenWorkDirectory_Click( object sender, EventArgs e )
		{
			if( this.fbdlgWorkDirectory.ShowDialog() == DialogResult.OK ) {
				this.m_sWorkDirectory = fbdlgWorkDirectory.SelectedPath;
				this.m_dcTreeView.LoadDirectory( m_sWorkDirectory );
			}
		}

		private void SaveFile_Click( object sender, EventArgs e )
		{
			DCDocument dcdActivated = GetFocusedDocument();
			if( dcdActivated != null ) {
				dcdActivated.SaveFile();
			}
			else {
				MessageBox.Show( "Fail to save the document." );
			}
		}

		private void SaveAll_Click( object sender, EventArgs e )
		{
			foreach( DCDocument dcdOpenedDocument in this.m_lstOpenedDocuments ) {
				dcdOpenedDocument.SaveFile();
			}
		}

		private void Exit_Click( object sender, EventArgs e )
		{
			this.Close();
		}

		#endregion

		#region View Control Event

		private void tsmiTreeView_Click( object sender, EventArgs e )
		{
			this.tsmiTreeView.Checked = !this.tsmiTreeView.Checked;
			if( this.tsmiTreeView.Checked ) {
				this.m_dcTreeView.Show( this.dplMainPanel );
			}
			else {
				this.m_dcTreeView.Hide();
			}
		}

		private void tsmiToolBox_Click( object sender, EventArgs e )
		{
			this.tsmiToolBox.Checked = !this.tsmiToolBox.Checked;
			if( this.tsmiToolBox.Checked ) {
				this.m_dcToolBox.Show( this.dplMainPanel );
			}
			else {
				this.m_dcToolBox.Hide();
			}
		}

		private void tsmiProperties_Click( object sender, EventArgs e )
		{
			this.tsmiProperties.Checked = !this.tsmiProperties.Checked;
			if( this.tsmiProperties.Checked ) {
				this.m_dcProperties.Show( this.dplMainPanel );
			}
			else {
				this.m_dcProperties.Hide();
			}
		}

		private void tsmiFenuList_Click( object sender, EventArgs e )
		{
			this.tsmiFenuList.Checked = !this.tsmiFenuList.Checked;
			if( this.tsmiFenuList.Checked ) {
				this.m_dcFenuList.Show( this.dplMainPanel );
			}
			else {
				this.m_dcFenuList.Hide();
			}
		}

		#endregion

		#region Tool Windows Control Event

		private void m_dcTreeView_FormClosing( object sender, FormClosingEventArgs e )
		{
			e.Cancel = true;
			this.tsmiTreeView.Checked = false;
			this.m_dcTreeView.Hide();
		}

		private void m_dcProperties_FormClosing( object sender, FormClosingEventArgs e )
		{
			e.Cancel = true;
			this.tsmiProperties.Checked = false;
			this.m_dcProperties.Hide();
		}

		private void m_dcToolBox_FormClosing( object sender, FormClosingEventArgs e )
		{
			e.Cancel = true;
			this.tsmiToolBox.Checked = false;
			this.m_dcToolBox.Hide();
		}

		private void m_dcFenuList_FormClosing( object sender, FormClosingEventArgs e )
		{
			e.Cancel = true;
			this.tsmiFenuList.Checked = false;
			this.m_dcFenuList.Hide();
		}

		#endregion

		#region Open file

		private void OpenFiles( string[] saFileNames )
		{
			for( int i = 0; i < saFileNames.Length; i++ ) {
				OpenFile( saFileNames[ i ] );
			}
		}

		private void WorkDirectoryTreeView_DoubleClick( object sender, EventArgs e )
		{
			TreeView tvwWorkDirectoryTreeView = sender as TreeView;
			if( tvwWorkDirectoryTreeView.SelectedNode != null ) {
				string sFileName = tvwWorkDirectoryTreeView.SelectedNode.FullPath;
				if( IsXmlFile( sFileName ) ) {
					OpenFile( sFileName );
				}
			}
		}

		private void OpenFile( string sFileName )
		{
			XmlDocument xdDocument = new XmlDocument();
			try {
				xdDocument.Load( sFileName );
			}
			catch( XmlException ) {
				MessageBox.Show( "illegal XML file!" );
				return;
			}

			if( IsBrowserXmlDocument( xdDocument ) ) {
				OpenDocument( DocumentType.browser, sFileName, IS_NOT_NEW_FILE );
			}
			else if( IsFenubarXmlDocument( xdDocument ) ) {
				OpenDocument( DocumentType.fenubar, sFileName, IS_NOT_NEW_FILE );
			}
			else {
				MessageBox.Show( "The file is NOT Browser nor Fenubar!" );
				return;
			}
		}

		private void OpenDocument( DocumentType dtType, string sFileName, bool bIsNewFile )
		{
			DCDocument dcdDocumentToShow = new DCDocument( dtType, sFileName, bIsNewFile );
			this.m_lstOpenedDocuments.Add( dcdDocumentToShow );
			SetDocumentEvents( dcdDocumentToShow );
			dcdDocumentToShow.Show( this.dplMainPanel, DockState.Document );
		}

		private void SetDocumentEvents( DCDocument dcdDocumentToShow )
		{
			if( dcdDocumentToShow.Type == DocumentType.browser ) {
				this.m_dcToolBox.SelectItemToDraw +=
					new DCToolBox.SelectItemToDrawHandler( dcdDocumentToShow.Browser.SelectItemToDraw );
			}

			dcdDocumentToShow.Activated += new EventHandler( Document_Activated );
			dcdDocumentToShow.Activated += new EventHandler( m_dcFenuList.Document_Activated );
			dcdDocumentToShow.Activated += new EventHandler( m_dcProperties.Document_Activated );
			dcdDocumentToShow.FenubarClick +=
				new DCDocument.FenubarClickHandler( m_dcProperties.Fenubar_Click );
			dcdDocumentToShow.BrowserItemMouseDown +=
				new DCDocument.BrowserItemMouseDownHandler( m_dcProperties.BrowserItem_MouseDown );
			dcdDocumentToShow.BrowserItemPropertiesChanged +=
				new DCDocument.BrowserItemPropertiesChangedHandler
					( m_dcProperties.BrowserItem_PropertiesChanged );
			dcdDocumentToShow.BrowserMouseUp +=
				new DCDocument.BorwserMouseUpHandler( m_dcProperties.Browser_MouseUp );
			dcdDocumentToShow.BrowserXmlLoadCompleted +=
				new DCDocument.BrowserXmlLoadCompletedHandler( m_dcProperties.Browser_XmlLoadCompleted );

		}

		#endregion

		#region Custom Functions

		private string GenerateNewNameWithIndex( string sDefaultName )
		{
			int nIndex = 1;
			bool bExist;
			string sResultName;
			do {
				sResultName = string.Concat( sDefaultName, nIndex.ToString() );
				bExist = false;

				foreach( DCDocument dcdOpenedDocument in m_lstOpenedDocuments ) {
					if( String.Compare( dcdOpenedDocument.FullName, sResultName ) == 0 ) {
						bExist = true;
						nIndex++;
						break;
					}
				}
			} while( bExist );
			return sResultName;
		}

		private bool IsXmlFile( string sFileName )
		{
			return ( String.Compare( GetFileExtension( sFileName ).ToLower(), ".xml" ) == 0 );
		}

		private bool IsBrowserXmlDocument( XmlDocument xdDocument )
		{
			return ( xdDocument.SelectSingleNode( "Screen" ) != null );
		}

		private bool IsFenubarXmlDocument( XmlDocument xdDocument )
		{
			return ( xdDocument.SelectSingleNode( "root" ) != null );
		}

		private DCDocument GetFocusedDocument()
		{
			foreach( DCDocument dcdOpenedDocument in m_lstOpenedDocuments ) {
				if( dcdOpenedDocument.ContainsFocus ) {
					return dcdOpenedDocument;
				}
			}
			return null;
		}

		private void Document_Activated( object sender, EventArgs e )
		{
			DCDocument dcdActivated = GetFocusedDocument();
			if( dcdActivated != null ) {
				switch( dcdActivated.Type ) {
					case DocumentType.browser:
						ShowBrowserUI();
						break;
					case DocumentType.fenubar:
						ShowFenubarUI();
						break;
				}
			}
		}

		private void ShowBrowserUI()
		{
			if( !tsmiToolBox.Checked ) {
				m_dcToolBox.Show();
				tsmiToolBox.Checked = true;
				tsmiToolBox.Enabled = true;
			}
			if( tsmiFenuList.Checked ) {
				m_dcFenuList.Hide();
				tsmiFenuList.Checked = false;
				tsmiFenuList.Enabled = false;
			}
		}
		private void ShowFenubarUI()
		{
			if( tsmiToolBox.Checked ) {
				m_dcToolBox.Hide();
				tsmiToolBox.Checked = false;
				tsmiToolBox.Enabled = false;
			}
			if( !tsmiFenuList.Checked ) {
				m_dcFenuList.Show();
				tsmiFenuList.Checked = true;
				tsmiFenuList.Enabled = true;
			}
		}

		private string GetFileExtension( string sFullName )
		{
			int nDotIndex = sFullName.LastIndexOf( '.' );
			if( nDotIndex < 0 ) {
				return "";
			}
			else {
				return sFullName.Substring( nDotIndex );
			}
		}

		#endregion




	}
}