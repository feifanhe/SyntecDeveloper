using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using WeifenLuo.WinFormsUI.Docking;
using System.IO;

namespace Syntec_Developer.Forms
{
	public partial class DCTreeView : DockContent
	{
		public delegate void TreeViewDoubleClickHandler( object sender, EventArgs e );
		public event TreeViewDoubleClickHandler TreeViewDoubleClick;

		enum ImageIndex
		{
			ROOT,
			FOLDER,
			FOLDER_OPEN,
			XML_FILE,
			FILE
		};

		public DCTreeView()
		{
			InitializeComponent();
		}

		public void LoadDirectory( string sDirectory )
		{
			this.tvwMain.Nodes.Clear();
			try {
				// Get all direcrtories and files
				DirectoryInfo difParent = new DirectoryInfo( sDirectory );
				DirectoryInfo[] difChildren = difParent.GetDirectories();
				FileInfo[] fifFiles = difParent.GetFiles();
				
				// Generate tree
				TreeNode tnRoot = new TreeNode(
					difParent.FullName,
					(int)ImageIndex.ROOT,
					(int)ImageIndex.ROOT,
					GetTreeNodes( difChildren, fifFiles )
				);
				tnRoot.Expand();
				this.tvwMain.Nodes.Add( tnRoot );
			}
			catch( IOException ) {
			}
		}

		// Returns TreeNode array which is converted from directories and files
		private TreeNode[] GetTreeNodes( DirectoryInfo[] difaDirectories, FileInfo[] fifaFiles )
		{
			TreeNode[] tnaDirNodes = null;
			TreeNode[] tnaFileNodes = null;
			TreeNode[] tnaResult = null;

			// Set directory nodes
			tnaDirNodes = new TreeNode[ difaDirectories.Length ];
			for( int i = 0; i < difaDirectories.Length; i++ ) {
				tnaDirNodes[ i ] = new TreeNode(
					difaDirectories[ i ].Name,
					(int)ImageIndex.FOLDER,
					(int)ImageIndex.FOLDER,
					GetTreeNodes( difaDirectories[ i ].GetDirectories(), difaDirectories[ i ].GetFiles() )
				);
			}

			// Set file nodes
			tnaFileNodes = new TreeNode[ fifaFiles.Length ];
			for( int i = 0; i < fifaFiles.Length; i++ ) {
				if( String.Compare( fifaFiles[ i ].Extension.ToLower(), ".xml" ) == 0 ) {
					tnaFileNodes[ i ] = new TreeNode(
						fifaFiles[ i ].Name,
						(int)ImageIndex.XML_FILE,
						(int)ImageIndex.XML_FILE
					);
				}
				else {
					tnaFileNodes[ i ] = new TreeNode(
						fifaFiles[ i ].Name,
						(int)ImageIndex.FILE,
						(int)ImageIndex.FILE
					);
				}
			}
			// Combine directory nodes and file nodes
			tnaResult = new TreeNode[ tnaDirNodes.Length + tnaFileNodes.Length ];
			tnaDirNodes.CopyTo( tnaResult, 0 );
			tnaFileNodes.CopyTo( tnaResult, tnaDirNodes.Length );

			return tnaResult;

		}

		private void tvwMain_AfterExpand( object sender, TreeViewEventArgs e )
		{
			if( e.Node.Level != 0 )
				e.Node.ImageIndex = (int)ImageIndex.FOLDER_OPEN;
		}

		private void tvwMain_AfterCollapse( object sender, TreeViewEventArgs e )
		{
			if( e.Node.Level != 0 )
				e.Node.ImageIndex = (int)ImageIndex.FOLDER;
		}

		private void tvwMain_DoubleClick( object sender, EventArgs e )
		{
			this.TreeViewDoubleClick.Invoke( sender, e );
		}


	}
}