using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using System.Threading;
using System.Xml;
using Syntec_Developer.Controls.PropertyClasses;

namespace Syntec_Developer.Controls
{
	public partial class CBrowserControl : UserControl
	{
		class LoadItemParameter
		{
			public XmlNode m_xnItem;
			public string m_sGroupName;

			public LoadItemParameter( XmlNode xnItem, string sGroupName )
			{
				this.m_xnItem = xnItem;
				this.m_sGroupName = sGroupName;
			}
		};

		public bool m_bIsNewFile;
		public string m_sFileName;
		public List<string> m_lstGroupName;
		public List<CBrowserItem> m_lstSelectItems;
		public Hashtable m_htbItems;
		public XmlDocument m_xdDocument;
		public BrowserProperties m_bpProperties;
		private bool m_bHasLoaded;

		// Mouse
		Graphics m_grpMouseDragDrop;
		bool m_bMouseDown;
		int m_nMouseDownX;
		int m_nMouseDownY;

		// Custom Define Event
		public delegate void ItemClickEventHandler( object sender, EventArgs e );
		public event ItemClickEventHandler ItemClick;
		public delegate void ItemLoadHandler( CBrowserItem biItem );
		public delegate void XmlLoadCompletedHandler( object sender, RunWorkerCompletedEventArgs e );
		public event XmlLoadCompletedHandler XmlLoadCompleted;

		// Open Browser
		public CBrowserControl( string sFileName, bool bIsNewFile )
		{
			InitializeComponent();
			this.m_sFileName = sFileName;
			this.m_bIsNewFile = bIsNewFile;
			this.m_htbItems = new Hashtable();
			this.m_lstGroupName = new List<string>();
			this.m_bpProperties = new BrowserProperties();
			this.m_lstSelectItems = new List<CBrowserItem>();
			this.m_bHasLoaded = false;
			this.m_grpMouseDragDrop = this.CreateGraphics();
		}

		#region Load XML

		private void CBrowserControl_Load( object sender, EventArgs e )
		{
			// load xml file after CBrowserControl loaded
			// to avoid the fact that thread of bgwLoadXml_DoWork terminates while CBrowserControl is still loading
			if( !this.m_bIsNewFile && !this.m_bHasLoaded ) {
				this.m_xdDocument = new XmlDocument();
				this.m_xdDocument.Load( m_sFileName );
				bgwLoadXml.RunWorkerAsync();
				this.m_bHasLoaded = true;
			}
		}

		private void bgwLoadXml_DoWork( object sender, DoWorkEventArgs e )
		{
			// load xml file asynchronously
			this.LoadXml();
		}

		private void bgwLoadXml_RunWorkerCompleted( object sender, RunWorkerCompletedEventArgs e )
		{
			this.XmlLoadCompleted.Invoke( this, e );
		}

		private void LoadXml()
		{
			XmlNode xnScreen = this.m_xdDocument.SelectSingleNode( "Screen" );
			foreach( XmlElement xnItem in xnScreen.ChildNodes ) {
				switch( xnItem.Name ) {
					case "Name":
						this.m_bpProperties.Name = xnItem.InnerText;
						break;
					case "Group":
						LoadGroup( xnItem );
						break;
					default:
						LoadItem( xnItem, "" );
						break;
				}
			}
		}

		private void LoadGroup( XmlNode xnGroup )
		{
			// Add group name into list
			string sGroupName = "";

			if( xnGroup.Attributes[ "Name" ] != null ) {
				sGroupName = xnGroup.Attributes[ "Name" ].Value;
			}

			this.m_lstGroupName.Add( sGroupName );

			foreach( XmlNode xnItem in xnGroup.ChildNodes ) {
				LoadItem( xnItem, sGroupName );
			}
		}

		private void LoadItem( XmlNode xnItem, string sGroupName )
		{
			CBrowserItem biItem;

			#region Set item type
			switch( xnItem.Name ) {
				case "Button":
					biItem = new CBrowserItem( ItemType.Button );
					break;
				case "CheckBox":
					biItem = new CBrowserItem( ItemType.CheckBox );
					break;
				case "CoordBox":
					biItem = new CBrowserItem( ItemType.CoordBox );
					break;
				case "Display":
					biItem = new CBrowserItem( ItemType.Display );
					break;
				case "FileList":
					biItem = new CBrowserItem( ItemType.FileList );
					break;
				case "Input":
					biItem = new CBrowserItem( ItemType.Input );
					break;
				case "Inputline":
					biItem = new CBrowserItem( ItemType.Inputline );
					break;
				case "Label":
					biItem = new CBrowserItem( ItemType.Label );
					break;
				case "Lamp":
					biItem = new CBrowserItem( ItemType.Lamp );
					break;
				case "ListInput":
					biItem = new CBrowserItem( ItemType.ListInput );
					break;
				case "Meter":
					biItem = new CBrowserItem( ItemType.Meter );
					break;
				case "OCSimu":
					biItem = new CBrowserItem( ItemType.OCSimu );
					break;
				case "OCText":
					biItem = new CBrowserItem( ItemType.OCText );
					break;
				case "Panel":
					biItem = new CBrowserItem( ItemType.Panel );
					break;
				case "Picture":
					biItem = new CBrowserItem( ItemType.Picture );
					break;
				case "Radio":
					biItem = new CBrowserItem( ItemType.Radio );
					break;
				case "Vision":
					biItem = new CBrowserItem( ItemType.Vision );
					break;
				default:
					return;
			}
			#endregion

			// set properties
			biItem.Properties.Group = sGroupName;
			biItem.Properties.LoadItemProperties( xnItem );

			// Loading item complete, invoke ItemLoadHandler to add controls to the item
			this.Invoke( new ItemLoadHandler( Item_Load ), new object[] { biItem } );
		}

		private void Item_Load( CBrowserItem biItem )
		{
			// Add controls to the item
			biItem.Click += new EventHandler( Item_Click );
			biItem.MouseDown += new MouseEventHandler( Item_MouseDown );
			biItem.MouseMove += new MouseEventHandler( Item_MouseMove );
			biItem.MouseUp += new MouseEventHandler( Item_MouseUp );
			this.Controls.Add( biItem );
			this.m_htbItems.Add( biItem.Properties.Name, biItem );
		}

		#endregion

		#region Browser Item Mouse Event

		private void Item_Click( object sender, EventArgs e )
		{
			CBrowserItem biItem = sender as CBrowserItem;
			this.ItemClick.Invoke( m_lstSelectItems, e );
		}

		private void Item_MouseDown( object sender, MouseEventArgs e )
		{
			CBrowserItem biItem = sender as CBrowserItem;
			biItem.m_bMouseDown = true;
			biItem.m_nMouseDownX = e.X;
			biItem.m_nMouseDownY = e.Y;

			if( Form.ModifierKeys == Keys.Control ) {
				// Do Ctrl-Left Click Work
				m_lstSelectItems.Add( biItem );
				biItem.BackColor = Color.Blue;
			}
			else {
				foreach( CBrowserItem biTemp in m_lstSelectItems ) {
					biTemp.BackColor = Color.White;
				}
				m_lstSelectItems.Clear();
				m_lstSelectItems.Add( biItem );
				biItem.BackColor = Color.Blue;
			}
		}

		public void Item_MouseMove( object sender, MouseEventArgs e )
		{
			CBrowserItem biItem = sender as CBrowserItem;
			// Move Item
			if( biItem.m_bMouseDown ) {
				biItem.Left += e.X - biItem.m_nMouseDownX;
				biItem.Top += e.Y - biItem.m_nMouseDownY;
			}
		}

		private void Item_MouseUp( object sender, MouseEventArgs e )
		{
			CBrowserItem biItem = sender as CBrowserItem;
			biItem.m_bMouseDown = false;
		}

		#endregion

		#region Browser Mouse Event

		private void CBrowserControl_Click( object sender, EventArgs e )
		{
			foreach( CBrowserItem biTemp in m_lstSelectItems ) {
				biTemp.BackColor = Color.White;
			}
			m_lstSelectItems.Clear();
		}

		private void CBrowserControl_MouseDown( object sender, MouseEventArgs e )
		{
			this.m_nMouseDownX = e.X;
			this.m_nMouseDownY = e.Y;
			this.m_bMouseDown = true;
		}

		private void CBrowserControl_MouseMove( object sender, MouseEventArgs e )
		{
			if( this.m_bMouseDown ) {
				Pen penMouseDragDrop = new Pen( Color.Black, 1 );
				penMouseDragDrop.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
				this.m_grpMouseDragDrop.Clear( this.BackColor );

				int nDeltaX = e.X - this.m_nMouseDownX;
				int nDeltaY = e.Y - this.m_nMouseDownY;
				int nOriginX = ( nDeltaX < 0 ) ? this.m_nMouseDownX + nDeltaX : this.m_nMouseDownX;
				int nOriginY = ( nDeltaY < 0 ) ? this.m_nMouseDownY + nDeltaY : this.m_nMouseDownY;
				int nWidth = Math.Abs( nDeltaX );
				int nHeight = Math.Abs( nDeltaY );

				this.m_grpMouseDragDrop.DrawRectangle( penMouseDragDrop, nOriginX, nOriginY, nWidth, nHeight );
			}
		}

		private void CBrowserControl_MouseUp( object sender, MouseEventArgs e )
		{
			this.m_grpMouseDragDrop.Clear( this.BackColor );
			this.m_bMouseDown = false;

			int nLeftMost = Math.Min( this.m_nMouseDownX, e.X );
			int nTopMost = Math.Min( this.m_nMouseDownY, e.Y );
			int nRightMost = Math.Abs( e.X - this.m_nMouseDownX ) + nLeftMost;
			int nDownMost = Math.Abs( e.Y - this.m_nMouseDownY ) + nTopMost;

			foreach( CBrowserItem biItem in m_htbItems.Values ) {
				if( nLeftMost <= biItem.Properties.X &&
					biItem.Properties.X <= nRightMost &&
					nTopMost <= biItem.Properties.Y &&
					biItem.Properties.Y <= nDownMost ) {
					m_lstSelectItems.Add( biItem );
					biItem.BackColor = Color.Blue;
				}
			}
		}

		#endregion
	}
}
