using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using System.Threading;
using System.Xml;
using Syntec_Developer.Controls.PropertyClasses;

namespace Syntec_Developer.Controls
{
	public partial class BrowserPanel : UserControl
	{
		private bool m_bIsNewFile;
		private bool m_bHasLoaded;
		private bool m_bMouseDown;
		private int m_nMouseDownX;
		private int m_nMouseDownY;
		private string m_sFileName;

		private List<string> m_lstGroupName;
		private List<BrowserItem> m_lstSelectItems;
		private Hashtable m_htbItems;
		private XmlDocument m_xdDocument;
		private BrowserProperties m_bpProperties;
		private Graphics m_grpMouseDragDropRegion;

		public BrowserProperties Properties
		{
			get
			{
				return this.m_bpProperties;
			}
		}

		public Hashtable Items
		{
			get
			{
				return this.m_htbItems;
			}
		}

		public List<BrowserItem> SelectedItems
		{
			get
			{
				return this.m_lstSelectItems;
			}
		}

		// Custom Define Event
		public delegate void ItemMouseDownHandler( object sender, EventArgs e );
		public event ItemMouseDownHandler ItemMouseDown;
		public delegate void ItemPropertiesChangedHandler( object sender, EventArgs e );
		public event ItemPropertiesChangedHandler ItemPropertiesChanged;
		public delegate void ItemLoadHandler( BrowserItem biItem );
		public delegate void XmlLoadCompletedHandler( object sender, RunWorkerCompletedEventArgs e );
		public event XmlLoadCompletedHandler XmlLoadCompleted;

		// Open Browser
		public BrowserPanel( string sFileName, bool bIsNewFile )
		{
			InitializeComponent();
			this.m_sFileName = sFileName;
			this.m_bIsNewFile = bIsNewFile;
			InitializeMembers();
		}

		private void InitializeMembers()
		{
			this.m_bHasLoaded = false;
			this.m_bMouseDown = false;
			this.m_nMouseDownX = 0;
			this.m_nMouseDownY = 0;
			this.m_lstGroupName = new List<string>();
			this.m_lstSelectItems = new List<BrowserItem>();
			this.m_htbItems = new Hashtable();
			this.m_bpProperties = new BrowserProperties();
			this.m_grpMouseDragDropRegion = this.CreateGraphics();
		}

		#region Load XML

		private void BrowserPanel_Load( object sender, EventArgs e )
		{
			if( !this.m_bIsNewFile && !this.m_bHasLoaded ) {
				this.m_xdDocument = new XmlDocument();
				this.m_xdDocument.Load( m_sFileName );
				bgwLoadXml.RunWorkerAsync();
			}
		}

		private void bgwLoadXml_DoWork( object sender, DoWorkEventArgs e )
		{
			this.LoadXml();
			this.m_bHasLoaded = true;
		}

		private void bgwLoadXml_RunWorkerCompleted( object sender, RunWorkerCompletedEventArgs e )
		{
			this.XmlLoadCompleted.Invoke( this, e );
		}

		private void LoadXml()
		{
			XmlNode xnScreen = this.m_xdDocument.SelectSingleNode( "Screen" );
			foreach( XmlElement xnItem in xnScreen.ChildNodes ) {
				switch( xnItem.Name ) {
					case "Name":
						this.m_bpProperties.Name = xnItem.InnerText;
						break;
					case "Group":
						LoadGroup( xnItem );
						break;
					case "Grid":
						LoadGrid( xnItem );
						break;
					default:
						LoadItem( xnItem, "" );
						break;
				}
			}
		}

		private void LoadGroup( XmlNode xnGroup )
		{
			string sGroupName = "";
			if( xnGroup.Attributes[ "Name" ] != null ) {
				sGroupName = xnGroup.Attributes[ "Name" ].Value;
				this.m_lstGroupName.Add( sGroupName );
			}
			foreach( XmlNode xnItem in xnGroup.ChildNodes ) {
				LoadItem( xnItem, sGroupName );
			}
		}

		private void LoadGrid( XmlNode xnGrid )
		{
			foreach( XmlNode xnItem in xnGrid.ChildNodes ) {
				LoadItem( xnItem, "" );
			}
		}

		private void LoadItem( XmlNode xnItem, string sGroupName )
		{
			string sItemType = xnItem.Name;
			BrowserItem biItemToAdd = new BrowserItem( sItemType );
			biItemToAdd.Properties.Group = sGroupName;
			biItemToAdd.Properties.LoadItemProperties( xnItem );
			SetItemEvents( biItemToAdd );
			this.Invoke( new ItemLoadHandler( AddItemIntoBrowser ), new object[] { biItemToAdd } );
		}

		private void SetItemEvents( BrowserItem biItemToAdd )
		{
			biItemToAdd.MouseDown += new MouseEventHandler( Item_MouseDown );
			biItemToAdd.MouseMove += new MouseEventHandler( Item_MouseMove );
			biItemToAdd.MouseUp += new MouseEventHandler( Item_MouseUp );
			biItemToAdd.LocationChanged += new EventHandler( Item_PropertiesChanged );
			biItemToAdd.SizeChanged += new EventHandler( Item_PropertiesChanged );
		}

		private void AddItemIntoBrowser( BrowserItem biItemToAdd )
		{
			this.ItemMouseDown += new ItemMouseDownHandler( biItemToAdd.Item_MouseDown );
			this.Controls.Add( biItemToAdd );
			this.m_htbItems.Add( biItemToAdd.Properties.Name, biItemToAdd );
		}

		#endregion

		#region Browser Item Mouse Event

		private void Item_MouseDown( object sender, MouseEventArgs e )
		{
			BrowserItem biItem = sender as BrowserItem;
			this.m_bMouseDown = true;
			this.m_nMouseDownX = e.X;
			this.m_nMouseDownY = e.Y;

			if( Form.ModifierKeys == Keys.Control ) {
				if( m_lstSelectItems.Contains( biItem ) ) {
					m_lstSelectItems.Remove( biItem );
					biItem.BackColor = Color.White;
				}
				else {
					// Do Ctrl-Left Click Work
					m_lstSelectItems.Add( biItem );
					biItem.BackColor = Color.Blue;
				}
			}
			else if( !m_lstSelectItems.Contains( biItem ) ) {
				foreach( BrowserItem biTemp in m_lstSelectItems ) {
					biTemp.BackColor = Color.White;
				}
				m_lstSelectItems.Clear();
				m_lstSelectItems.Add( biItem );
				biItem.BackColor = Color.Blue;
			}

			this.ItemMouseDown.Invoke( m_lstSelectItems, e );
		}

		public void Item_MouseMove( object sender, MouseEventArgs e )
		{
			if( this.m_bMouseDown ) {
				foreach( BrowserItem biItem in this.m_lstSelectItems ) {
					biItem.Left += e.X - this.m_nMouseDownX;
					biItem.Top += e.Y - this.m_nMouseDownY;
				}
			}
		}

		private void Item_MouseUp( object sender, MouseEventArgs e )
		{
			BrowserItem biItem = sender as BrowserItem;
			this.m_bMouseDown = false;
		}

		private void Item_PropertiesChanged( object sender, EventArgs e )
		{
			this.ItemPropertiesChanged.Invoke( this.m_lstSelectItems, e );
		}

		#endregion

		#region Browser Mouse Event

		private void BrowserPanel_MouseDown( object sender, MouseEventArgs e )
		{
			this.m_nMouseDownX = e.X;
			this.m_nMouseDownY = e.Y;
			this.m_bMouseDown = true;

			if( Form.ModifierKeys != Keys.Control ) {
				foreach( BrowserItem biTemp in m_lstSelectItems ) {
					biTemp.BackColor = Color.White;
				}
				m_lstSelectItems.Clear();
			}
		}

		private void BrowserPanel_MouseMove( object sender, MouseEventArgs e )
		{
			if( this.m_bMouseDown ) {
				this.m_grpMouseDragDropRegion.Clear( this.BackColor );
				DrawMouseDragDropRegion( e.Location );
			}
		}

		private void DrawMouseDragDropRegion( Point pntMouseMoveLocation )
		{
			int nDeltaX = pntMouseMoveLocation.X - this.m_nMouseDownX;
			int nDeltaY = pntMouseMoveLocation.Y - this.m_nMouseDownY;
			int nOriginX = ( nDeltaX < 0 ) ? this.m_nMouseDownX + nDeltaX : this.m_nMouseDownX;
			int nOriginY = ( nDeltaY < 0 ) ? this.m_nMouseDownY + nDeltaY : this.m_nMouseDownY;
			int nWidth = Math.Abs( nDeltaX );
			int nHeight = Math.Abs( nDeltaY );
			Pen penMouseDragDropRegion = new Pen( Color.Black, 1 );
			penMouseDragDropRegion.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
			this.m_grpMouseDragDropRegion.DrawRectangle( penMouseDragDropRegion, nOriginX, nOriginY, nWidth, nHeight );
		}

		private void BrowserPanel_MouseUp( object sender, MouseEventArgs e )
		{
			this.m_grpMouseDragDropRegion.Clear( this.BackColor );
			this.m_bMouseDown = false;

			foreach( BrowserItem biItem in m_htbItems.Values ) {
				if( IsItemInDragDropRegion( biItem, e.Location ) ) {
					m_lstSelectItems.Add( biItem );
					biItem.BackColor = Color.Blue;
				}
			}
		}

		private bool IsItemInDragDropRegion( BrowserItem biItem, Point pntMouseUpLocation )
		{
			int nLeftMost = Math.Min( this.m_nMouseDownX, pntMouseUpLocation.X );
			int nTopMost = Math.Min( this.m_nMouseDownY, pntMouseUpLocation.Y );
			int nRightMost = Math.Abs( pntMouseUpLocation.X - this.m_nMouseDownX ) + nLeftMost;
			int nDownMost = Math.Abs( pntMouseUpLocation.Y - this.m_nMouseDownY ) + nTopMost;

			return (
				biItem.Properties.X >= nLeftMost &&
				biItem.Properties.X <= nRightMost &&
				biItem.Properties.Y >= nTopMost &&
				biItem.Properties.Y <= nDownMost
			);
		}

		#endregion
	}
}
