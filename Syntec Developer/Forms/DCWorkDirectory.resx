<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imgTreeView.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imgTreeView.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAB8
        FQAAAk1TRnQBSQFMAgEBBgEAAXABAAFwAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEYBgABGEIAMP9mAAG3AaIBkwFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFj
        AUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQkAA/8kAAn/ZgABtwGiAZMD/wG3AaIBkwG3AaIBkwG3
        AaIBkwG3AaIBkwG3AaIBkwG3AaIBkwG3AaIBkwG3AaIBkwFjAUkBNQkAA/8DgB7/A8ADAAb/ZgABtwGi
        AZMG/wH8AfoB+QH3AfEB7gHxAecB4QHsAd0B1QHmAdMByQHhAcoBvQG3AaIBkwFjAUkBNQkABv8DgAMA
        A8ADAAPAAwADwAMAA8ADAAPABgAD/2YAAbcBogGTBv8D/gH6AfcC9QHtAekB7wHjAdwB6gHZAdEB5AHP
        AcQBtwGiAZMBYwFJATUJAAn/A4ADAAOAAwADgAMAA4ADAAOAAwAGgGkAAbcBogGTCf8B/QH8AfsB+AHz
        AfAB8gHpAeMB7QHfAdgB5wHVAcsBtwGiAZMBYwFJATUJAAn/A4AYwAOAA8ADgGkAAboBpQGWDP8B+wH4
        AfcB9gHvAesB8AHlAd8B6wHbAdMBtwGiAZMBYwFJATUJAAz/A4AYAAOAA8BpAAG+AakBmgz/Af4B/QH8
        AfkB9QHyAfQB6wHmAe4B4QHaAbcBogGTAWMBSQE1CQAM/wOAA/8SwAOAAwAGgGYAAcMBrgGeD/8B/AH6
        AfkB9wHxAe4B8QHnAeEBtwGiAZMBYwFJATUJAAz/A4AD/wMADIADwAaAAwAD/2YAAcgBsgGjD/8D/gH6
        AfcC9QHtAekBtwGiAZMBYwFJATUJAAz/A4AD/wMAAoABAAKAAQACgAEAA4ADwAaAAwAD/2YAAcwBtgGn
        Ev8B/QH8AfsBtwGiAZMBtwGiAZMBZAFKATYJAAz/A4AD/wMAAv8BAAKAAQACgAEAA4ADwAaAAwAD/2YA
        AdEBuwGrEv8BtwGiAZMBZAFKATYBZAFKATYBZAFKATYJAAz/A4AD/w8AA8AGgAMAA/9mAAHVAb8BrxL/
        AbkBpAGVAdQBxQG6AWQBSgE2AeQB3QHYCQAM/wOAEv8DwAaAAwAD/2YAAdgBwgGyEv8BwAGrAZwBZAFK
        ATYB5AHeAdkMAA//A4AVwAOAAwAD/2YAAdgBwgGyAdgBwgGyAdgBwgGyAdgBwgGyAdgBwgGyAdQBvgGu
        Ac8BuQGpAckBswGkAeQB3gHZDwAS/xiABv+QADD/YAAD+SoAA/GQAAPzA7skrgOyA8FjAAG3AaIBkwFj
        AUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFjAUkBNQFj
        AUkBNQFjAUkBNQFjAUkBNQMAAc4BqgGXAZQBbwFbAYcBYgFPAYcBYgFPAYYBYgFPAYcBYgFPAYcBYgFP
        AYcBYgFPAYcBYgFPAYcBYgFPAYcBYgFPAYcBYgFPAYUBYQFOAYgBYgFPAXkBZAFZA5sBdQGEAY8BbAF6
        AYUBYAFtAXcBUQFdAWYBQgFMAVQBMQE6AUEBIwEqATABFgEcASEBDgETARgBDgETARgBDgETARgBDgET
        ARgBDgETARgBDgETARgBDgETARgDAAF1AYQBjwFmAYABjwFgAXkBhwFXAW4BewFOAWIBbwFEAVYBYQE5
        AUgBUgEuAToBQwElAS4BNQEbASIBKQEUARkBHgEOARIBFgEOARMBGAwAAbcBogGTAfcB5QHcAd0BzwHI
        AdgByQHBAdMBwgG5Ac8BvAGyAcoBtgGqAcYBsAGkAcIBqwGeAb4BpgGYAboBoAGSAbQBmgGMAbABlQGG
        AWMBSQE1AwAByQGZAX8BxwGnAZYBwwGjAZIBwgGjAZIBwQGjAZIBwwGjAZIBwwGjAZIBwwGjAZIBwwGj
        AZIBwwGjAZIBwwGjAZIBwwGjAZIBwgGiAZIBxAGjAZMBfAFXAUMDjwF3AYcBkgGiAd8B8AFwAc0B6gFJ
        AbgB4gE3Aa4B2wEtAakB2QEmAaEB0gEhAZgBxwEgAY4BvAEeAYMBrgEZAX8BqwEVAXwBqQEbAXcBnwEf
        AXIBlgEWARwBIQMAAXcBhwGSAYkBoQGrAWoBsgHUAQABjwHNAQABjwHNAQABjwHNAQQBjAHHAQgBiAG+
        AQ8BggG0ARUBfAGpARsBdwGfAR8BcgGWASIBSwFcAZsBrQG1CQABtwGiAZMB+QHpAeIB+QHpAeIB+QHp
        AeIB+AHmAd0B9wHiAdgB9QHeAdMB9AHbAc4B8wHXAcoB8gHUAcUB8QHQAcEB8AHNAbwBtgGcAY4BYwFJ
        ATUDAAHZAbUBngH8AfkB+AH7AfkB9wH6AfkB9wL5AfcB+gH5AfcB+gH5AfcB+gH5AfcB+gH5AfcB+gH5
        AfcB+gH5AfcB+gH5AfcB+wH5AfgB+wH5AfcBhQFeAUcDjwF6AYoBlQGqAegB9gGVAeUB/AGEAd8B+wF1
        AdYB+gFqAdAB9wFdAcYB9AFQAb4B8AFBAbQB7AE1AaoB6AErAaQB5gEgAZoB3wEWAZAB1wEbAXcBnwEg
        AScBLQMAAXoBigGVAX4BvgHTAYoBpAGuAX4B3AH/AV8BzwH/AVUBywH/AUwBxAH6AUEBvAH1ATcBswHw
        AS4BqgHrASQBoAHlARMBjAHUASMBZwGAAV4BaQFtCQABtwGiAZMB+QHuAegB+QHuAegB+QHuAegB6gGP
        AWAB6gGEAU8B5gF4AT8B3wFvATYB0gFmATABwQFdASoB8gHVAcYB8QHRAcIBvAGjAZUBYwFJATUDAAHc
        AbkBogP/AfwC/wH8Av8B/AL/AfwC/wH8Av8B/AL/AfwC/wH8Av8B/AL/AfwC/wH9Av8B/gL/AYYBXwFH
        A48BfQGOAZgBsAHqAfYBnwHpAfsBkgHkAfwBgQHdAfsBdQHWAfoBaAHOAfcBXQHGAfQBTQG8AfABQQG0
        AewBNQGqAegBKgGjAeYBHQGWAdwBFQF8AakBLQE0ATsDAAF9AY4BmAF5AdIB7AGLAaQBrQGJAcIBzgFx
        AdgB/wFlAdMB/wFcAc4B/wFRAckB/gFJAcEB+gE/AbkB9QE0AbAB7gEpAagB6QEQAYUBzQEiAUsBWwGy
        AcABxgYAAbcBogGTAfsB8gHtAfsB8gHtAfsB8gHtAfoB7gHpAfkB6gHkAfgB5wHgAfcB5AHaAfYB4QHV
        AfUB3AHRAfQB2AHMAfMB1QHHAcIBqgGeAWMBSQE1AwAB3QG5AZ8D/wH6Av8B+gL/AfoC/wH6Av8B+gL/
        AfoC/wH6Av8B+gL/AfoC/wH6Av8B+wL/Af0B/wH+AYgBYAFFA48BgAGRAZwBtgHtAfgBqgHsAfsBmwHo
        AfsBjwHjAfwBgQHdAfsBcQHVAfkBaAHOAfcBWwHFAfQBTQG8AfABPQGyAewBMgGpAegBJAGeAeIBEAGC
        AbQBOwFDAUsDAAGAAZEBnAGBAdcB7wF9AcUB4AGMAaYBsAGAAd0B/gFoAdMB/wFnAdQB/wFiAdEB/wFY
        Ac0B/wFOAccB/AFGAb4B9wE7AbYB8gExAawB7AElAWkBgQF6AZUBoQYAAbcBogGTAfwB9gHzAfwB9gHz
        AfwB9gHzAeoBjwFgAeoBhAFPAeYBeAE/Ad8BbwE2AdIBZgEwAcEBXQEqAfQB3gHTAfMB2gHNAccBsQGl
        AWMBSQE1AwAB4AG7AZ0D/wH6Av8B+gL/AfoC/wH6Av8B+gL/AfoC/wH6Av8B+gL/AfoC/wH6Av8B+wL/
        Af0B/wH+AYoBYgFFA48BgwGVAZ8BvgHwAfkBqwHwAfcBpQHsAfsBmAHnAfsBiQHhAfwBfwHdAfsBcQHV
        AfkBZQHNAfcBWAHEAfMBSwG7AfABPQGyAewBLAGkAeMBDAGKAb8BSQFTAVwDAAGDAZUBnwGJAdwB8QGM
        AeIB/wGNAagBsQGMAboBxwF0AdgB/wFnAdQB/wFnAdQB/wFnAdQB/wFfAdAB/wFUAc0B/wFLAcUB/AFB
        AbsB9wEuAaIB2wFRAWcBdAGyAcABxgMAAboBpQGWAf0B+QH2Af0B+QH2Af0B+QH2AfwB9gHzAfwB8wHv
        AfoB8AHrAfoB7QHnAfgB6QHhAfcB5QHdAfYB4gHYAfUB3wHTAcwBuAGuAWMBSQE1AwAB4wG8AZwD/wH6
        Av8B+gL/AfoC/wH6Av8B+gL/AfoC/wH6Av8B+gL/AfoC/wH6Av8B+wL/AfwB/wH+AY0BYwFFA48BhgGZ
        AaMBvgHwAfkBtgHtAfgBsAHuAfoBpAHrAfoBlQHmAfsBiQHhAfwBfQHcAfwBcQHVAfkBZQHNAfcBWAHE
        AfMBSQG5Ae8BNQGpAecBDAGPAccBVwFjAWsDAAGGAZoBowGSAeEB8gGYAegB/QGAAcQB3gGOAacBsAGB
        Ad4B/QGEAeAB/wGEAeAB/wGEAeAB/wGEAeAB/wGBAd8B/wF7Ad0B/wF0AdgB/wFrAdYB/wFWAakB0QGP
        AZsBpAMAAb4BqQGaAf4B/AH7Af4B/AH7AaUBTwElAf0B+QH4AasBuAGRAVQBeAEtAYoBcAFIAc4BsQGe
        AfgB6gHkAaUBTwElAfYB4gHaAdIBwAG4AWMBSQE1AwAB5QG+AZsD/wH6Av8B+wL/AfoC/wH6Av8B+gL/
        AfoC/wH6Av8B+gL/AfoC/wH6Av8B+gL/Af4B/wH9AY8BZQFEA48BiQGcAaYBvgHwAfkBtgHtAfgBtgHt
        AfgBqwHwAfcBogHsAfoBlQHmAfsBiQHhAfwBfQHcAfwBbwHTAfoBYwHMAfcBVQHDAfMBSQG5Ae8BGQGZ
        Ac8BYwFwAXoDAAGIAZwBpQGaAeYB8wGfAesB+wGYAegB/gGLAawBuQGLAawBuQGKAaoBtwGIAaYBswGG
        AaMBrwGDAZ8BqgGBAZoBpgF/AZUBoQF8AZEBnQF6AY4BmQF5AYsBlQF3AYgBkwMAAcMBrgGeA/4BpQFP
        ASUE/gH9AfwBfgGCATsBkAGTAUIBcAF3ATEBdgGnAWcB+gHuAekB+QHrAeUBpQFPASUB2QHJAcEBYwFJ
        ATUDAAHmAb8BmQP/AfoC/wH6Av8B+gL/AfoC/wH6Av8B+gL/AfoC/wH6Av8B+gL/AfsC/wH7Av8B/gH/
        Af0BkQFmAUQDjwGLAaABqAG+AfAB+QG+AfAB+QG+AfAB+QG+AfAB+QG0AfIB+AGqAewB+wGgAekB+wGV
        AeUB/AGKAd8B/AF/AdgB+wF0AdIB+AFoAcoB9AFdAcAB8QFjAXABegMAAYsBoAGoAaAB6gH2AaYB7gH5
        AZ8B6wH7AZgB6AH+AXoB2gH/AWcB1AH/AWcB1AH/AWcB1AH/AWcB1AH/AWcB1AH/AWcB1AH/AXcBiAGT
        DAAByAGyAaMG/wGlAU8BJQP/AWMBtgFiAcMByAGdAaIBkQE6AZwBxgGKAfsB8gHuAaUBTwElAfkB7AHm
        Ad8B0gHMAWMBSQE1AwAB6gHBAZoD/wH9Av8B/AL/AfwC/wH8Av8B/AL/Af0C/wH8Av8B/AL/AfwC/wH9
        Av8B/QT/Af4BlAFnAUIDjwGNAaEBqgGNAaEBqgGNAaEBqgGNAaEBqgGNAaEBqgGLAZ8BqAGJAZwBpgGJ
        AZsBpgGHAZoBpAGGAZkBowGEAZYBoAGEAZYBoAGDAZUBoAGDAZUBoAF1AYQBjwMAAY4BogGrAacB7gH2
        AasB8AH3AaYB7gH5AZ8B6wH7AZgB6AH9AXEB1AH7AYkBngGnAYYBmQGjAYIBlAGfAX4BkAGaAXoBjAGX
        AXcBiAGTDAABzAG2AacM/wHWAfIB0gGZAcoBiwGsAa8BfAHvAfEB5gH8AfYB8wH7AfQB7wHqAeIB3QHl
        AdsB1QFkAUoBNgMAAegBvQGTAfUB8wHwAfUB8gHtAfUB8gHtAfUB8gHtAfUB8gHtAfQB8gHtAfUB8gHt
        AfUB8gHtAfQB8gHtAfQB8QHsAfQB8QHsAfYB8gHrAfgB8QHmAZcBbgFKBI8BpAGsAbIB5AHsAbYB7QH4
        AbYB7QH4AakB7AH2AZIB4QHzAY0BoQGqAdUB3AHgGAABjwGkAawBoAHSAdoBqwHwAfcBqwHwAfcBpgHu
        AfkBnwHrAfsBjQGhAaoB1QHcAeAbAAHRAbsBqxP/Af4B/QH+AvsB/QH5AfgBtwGiAZMBZAFKATYBZAFK
        ATYBZAFKATYDAAHXAaEBZwHbAcEBpQHaAb4BnwHbAb8BnwHbAb4BnwHbAb4BoAHaAb8BnwHbAb4BnwHb
        Ab4BnwHaAb4BnwHcAcIBogHdAcABoQHaAcABpQHQAbkBogGgAYEBYgOXAdoB3gHhAY8BpAGsAY8BpAGs
        AY8BpAGsAY8BpAGsAY8BpAGsAdUB3AHgGwAB2gHeAeEBjwGkAawBjwGkAawBjwGkAawBjwGkAawBjwGk
        AawB1QHcAeAeAAHVAb8Brxb/A/4B/AH7AbkBpAGVAdQBxQG6AWMBSQE1AcEBsgGnAwABwQFtARUBwgFq
        ARUBwQFpAREBwgFqAREBwgFqAREBwgFpARIBwQFpAREBwQFoAQ8BwQFpAQ4BwQFoAQ8BzAF7ASgBzgF3
        ASEBuQFzATcBhgFdAVABtQGZAXwDumMAAdgBwgGyGv8B/gHAAasBnAFjAUkBNQHCAbMBpwYAAeABmgFJ
        AeUBlAE2AecBkgEwAecBkAEtAeYBkQErAeYBjwEsAeYBkgEvAeYBkAEtAeYBjwEmAeQBjAEkAecBjwEr
        AekBkAEqAeMBkQE0Ac4BhwE+AeMBvwGUZgAB2AHCAbIB2AHCAbIB2AHCAbIB2AHCAbIB2AHCAbIB2AHC
        AbIB2AHCAbIB2AHCAbIB1AG+Aa4BzwG5AakByQGzAaQB4gHWAc0JAAFCAU0BPgcAAT4DAAEoAwABQAMA
        ASADAAEBAQABAQYAAQEWAAP/AQAC/wYAAcABBwYAAcABBwYAAcABBwYAAcABBwYAAcABBwYAAcABBwYA
        AcABBwYAAcABBwYAAcABBwYAAcABBwYAAcABBwYAAcABBwYAAcABDwYAAcABHwYAAv8GAAF/Af4G/wIA
        BP8BgAEBAwABAQEAAQcBgAEBAwABAQEAAQMBgAEBAwABAQEAAQMBgAEBAwABAQEAAQEBgAEBAwABAQEA
        AQEBgAEBAwABAQIAAYABAQMAAQECAAGAAQEDAAEBAgABgAEBAwABAQEAAQcBgAEBAwABAQEAAQcBgAEB
        AwAB/wEAAf8BgAEBAgABAQH/AQEB/wGAAQECAAT/AYABAwEAAQEE/wGAAQcL
</value>
  </data>
</root>